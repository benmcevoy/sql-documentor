<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RazorHosting</name>
    </assembly>
    <members>
        <member name="T:RazorHosting.RazorEngine`1">
            <summary>
            The main hosting class that handles instantiation of the
            host and rendering, compiling and executing of templates.    
            </summary>
            <typeparam name="TBaseTemplateType">RazorTemplateHost based type</typeparam>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.CreateHost(System.String,System.String)">
            <summary>
            Creates an instance of the RazorHost with various options applied.
            Applies basic namespace imports and the name of the class to generate
            </summary>
            <param name="generatedNamespace"></param>
            <param name="generatedClass"></param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.ParseAndCompileTemplate(System.String[],System.IO.TextReader,System.String,System.String)">
            <summary>
            Parses and compiles a markup template into an assembly and returns
            an assembly name. The name is an ID that can be passed to 
            ExecuteTemplateByAssembly which picks up a cached instance of the
            loaded assembly.
            
            </summary>
            <param name="ReferencedAssemblies">Any referenced assemblies by dll name only. Assemblies must be in execution path of host or in GAC.</param>
            <param name="templateSourceReader">Textreader that loads the template</param>
            <param name="generatedNamespace">The namespace of the class to generate from the template. null generates name.</param>
            <param name="generatedClassName">The name of the class to generate from the template. null generates name.</param>
            <remarks>
            The actual assembly isn't returned here to allow for cross-AppDomain
            operation. If the assembly was returned it would fail for cross-AppDomain
            calls.
            </remarks>
            <returns>An assembly Id. The Assembly is cached in memory and can be used with RenderFromAssembly.</returns>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.ParseAndCompileTemplate(System.String[],System.IO.TextReader)">
            <summary>
            Parses and compiles a markup template into an assembly and returns
            an assembly name. The name is an ID that can be passed to 
            ExecuteTemplateByAssembly which picks up a cached instance of the
            loaded assembly.
            
            </summary>
            <param name="ReferencedAssemblies">Any referenced assemblies by dll name only. Assemblies must be in execution path of host or in GAC.</param>
            <param name="templateSourceReader">Textreader that loads the template</param>
            <remarks>
            The actual assembly isn't returned here to allow for cross-AppDomain
            operation. If the assembly was returned it would fail for cross-AppDomain
            calls.
            </remarks>
            <returns>An assembly Id. The Assembly is cached in memory and can be used with RenderFromAssembly.</returns>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.RenderTemplateFromAssembly(System.String,System.Object,System.IO.TextWriter)">
            <summary>
            Executes a template based on a previously generated assembly reference.
            This effectively allows you to cache an assembly.
            </summary>
            <param name="generatedAssemblyId"></param>
            <param name="context"></param>
            <param name="outputWriter">A text writer that receives output generated by the template. Writer is closed after rendering.</param>
            <returns>if no outputWriter is passed the response is returned as a string or null on error. 
            if an outputWriter is passed the response is an empty string on success or null on error</returns>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.RenderTemplateFromAssembly(System.String,System.Object,System.IO.TextWriter,System.String,System.String)">
            <summary>
            Executes a template based on a previously generated assembly reference.
            This effectively allows you to cache an assembly.
            </summary>
            <param name="generatedAssembly"></param>
            <param name="context"></param>
            <param name="outputWriter">A text writer that receives output generated by the template. Writer is closed after rendering.</param>
            <param name="generatedNamespace"></param>
            <param name="generatedClass"></param>
            <returns>if no outputWriter is passed the response is returned as a string or null on error. 
            if an outputWriter is passed the response is an empty string on success or null on error</returns>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.RenderTemplateFromAssembly(System.String,System.Object,System.String,System.String)">
            <summary>
            Executes a template based on a previously generated assembly reference.
            This effectively allows you to cache an assembly.
            </summary>
            <param name="generatedAssembly"></param>
            <param name="context"></param>
            <param name="generatedNamespace"></param>
            <param name="generatedClass"></param>
            <returns>The response is returned as a string or null on error.</returns>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.RenderTemplateFromAssembly(System.String,System.Object)">
            <summary>
            Executes a template based on a previously generated assembly reference.
            This effectively allows you to cache an assembly.
            </summary>
            <param name="generatedAssembly"></param>
            <param name="context"></param>
            <param name="generatedNamespace"></param>
            <param name="generatedClass"></param>
            <returns>The response is returned as a string or null on error.</returns>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.RenderTemplate(System.IO.TextReader,System.String[],System.Object,System.IO.TextWriter)">
            <summary>
            Execute a template based on a TextReader input into a provided TextWriter object.
            </summary>
            <param name="mplateSourceReader">A text reader that reads in the markup template</param>
            <param name="generatedNamespace">Name of the namespace that is generated</param>
            <param name="generatedClass">Name of the class that is generated</param>
            <param name="referencedAssemblies">Any assembly references required by template as a DLL names. Must be in execution path or GAC.</param>
            <param name="context">Optional context available in the template as this.Context</param>
            <param name="outputWriter">A text writer that receives the rendered template output. Writer is closed after rendering.</param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.RenderTemplate(System.IO.TextReader,System.String[],System.Object)">
            <summary>
            Executes a template from a text reader to a string
            </summary>
            <param name="sourceCodeReader">TextReader that points at the template markup code.</param>
            <param name="generatedNamespace">Name of the namespace that is generated.</param>
            <param name="generatedClass">Name of the class that is generated.</param>
            <param name="referencedAssemblies">Referenced assemblies as dll names. must be in execution path of host application.</param>
            <param name="context">Optional context to pass to template (as this.Template)</param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.RenderTemplate(System.String,System.String[],System.Object)">
            <summary>
            Executes a template based on string input and generates a string result.
            </summary>
            <param name="inputTemplateText"></param>
            <param name="generatedNamespace"></param>
            <param name="generatedClass"></param>
            <param name="referencedAssemblies"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.RenderTemplateToFile(System.String,System.String[],System.Object,System.String)">
            <summary>
            Executes a template to file from a string input
            </summary>
            <param name="inputTemplateText"></param>
            <param name="generatedNamespace"></param>
            <param name="generatedClass"></param>
            <param name="referencedAssemblies"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.RenderTemplateToFile(System.IO.TextReader,System.String[],System.Object,System.String)">
            <summary>
            Executes a template to file from a string input
            </summary>
            <param name="inputTemplateText"></param>
            <param name="generatedNamespace"></param>
            <param name="generatedClass"></param>
            <param name="referencedAssemblies"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.GetAssemblyFromId(System.String)">
            <summary>
            Allows retrieval of an Assembly cached internally by its id
            returned from ParseAndCompileTemplate. Useful if you want
            to write an assembly to disk for later activation
            </summary>
            <param name="assemblyId"></param>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.InstantiateTemplateClass(System.Type)">
            <summary>
            Overridable instance creation routine for the host. 
            
            Handle custom template base classes (derived from RazorTemplateBase)
            and setting of properties on the instance in subclasses by overriding
            this method.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.InvokeTemplateInstance(`0,System.Object)">
            <summary>
            Internally executes an instance of the template,
            captures errors on execution and returns true or false
            </summary>
            <param name="instance">An instance of the generated template</param>
            <returns>true or false - check ErrorMessage for errors</returns>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.InitializeLifetimeService">
            <summary>
            Override to allow indefinite lifetime - no unloading
            </summary>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.GetSafeClassName(System.Object)">
            <summary>
            Returns a unique ClassName for a template to execute
            Optionally pass in an objectId on which the code is based
            or null to get default behavior.
            
            Default implementation just returns Guid as string
            </summary>
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorEngine`1.SetError(System.String)">
            <summary>
            Sets error information consistently
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:RazorHosting.RazorEngine`1.ErrorMessage">
            <summary>
            Any errors that occurred during template execution
            </summary>
        </member>
        <member name="P:RazorHosting.RazorEngine`1.LastGeneratedCode">
            <summary>
            Last generated output
            </summary>
        </member>
        <member name="P:RazorHosting.RazorEngine`1.Configuration">
            <summary>
            Holds Razor Configuration Properties
            </summary>
        </member>
        <member name="P:RazorHosting.RazorEngine`1.HostContainer">
            <summary>
            Provide a reference to a RazorHost container so that it
            can be passed to a template.
            
            This may be null, but if a container is available this value
            is set and passed on to the template as HostContainer.
            </summary>
        </member>
        <member name="P:RazorHosting.RazorEngine`1.ReferencedNamespaces">
            <summary>
            A list of default namespaces to include
            
            Defaults already included:
            System, System.Text, System.IO, System.Collections.Generic, System.Linq
            </summary>
        </member>
        <member name="P:RazorHosting.RazorEngine`1.AssemblyCache">
            <summary>
            Internally cache assemblies loaded with ParseAndCompileTemplate.        
            Assemblies are cached in the EngineHost so they don't have
            to cross AppDomains for invocation when running in a separate AppDomain
            </summary>
        </member>
        <member name="P:RazorHosting.RazorEngine`1.TemplatePerRequestConfigurationData">
            <summary>
            A property that holds any per request configuration 
            data that is to be passed to the template. This object
            is passed to InitializeTemplate after the instance was
            created.
            
            This object must be serializable. 
            This object should be set on every request and cleared out after 
            each request       
            </summary>
        </member>
        <member name="T:RazorHosting.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:RazorHosting.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RazorHosting.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:RazorHosting.Properties.Resources.CouldnTActivateTypeInstance">
            <summary>
              Looks up a localized string similar to Couldn&apos;t activate type instance: .
            </summary>
        </member>
        <member name="P:RazorHosting.Properties.Resources.CouldnTActivateTypeInstance1">
            <summary>
              Looks up a localized string similar to Couldn&apos;t activate type instance: .
            </summary>
        </member>
        <member name="P:RazorHosting.Properties.Resources.ErrorReadingTemplateFile">
            <summary>
              Looks up a localized string similar to Error reading template file: .
            </summary>
        </member>
        <member name="P:RazorHosting.Properties.Resources.LineX0TColX1TErrorX2RN">
             <summary>
               Looks up a localized string similar to Line: {0}\t Col: {1}\t Error: {2}
            .
             </summary>
        </member>
        <member name="P:RazorHosting.Properties.Resources.PreviouslyCompiledAssemblyNotFound">
            <summary>
              Looks up a localized string similar to Previously compiled assembly not found..
            </summary>
        </member>
        <member name="P:RazorHosting.Properties.Resources.TemplateExecutionError">
            <summary>
              Looks up a localized string similar to Template Execution Error: .
            </summary>
        </member>
        <member name="P:RazorHosting.Properties.Resources.TemplateFileDoesnTExist">
            <summary>
              Looks up a localized string similar to Template File doesn&apos;t exist: .
            </summary>
        </member>
        <member name="P:RazorHosting.Properties.Resources.UnableToCreateType">
            <summary>
              Looks up a localized string similar to Unable to create type  .
            </summary>
        </member>
        <member name="T:RazorHosting.RazorFolderHostContainer">
            <summary>
            This class is a caching directory based host wrapper around
            the RazorHost classes to provide directory based Razor
            template execution. Templates are compiled on 
            the fly, and cached unless the templates on disk are changed.
            
            Runs Razor Templates in a seperate AppDomain
            
            Uses the RazorTemplateFolderHost base template by default.
            For any other template implementation use the generic parameter
            to specify the template type.
            </summary>
        </member>
        <member name="T:RazorHosting.RazorFolderHostContainer`1">
            <summary>
            This class is a caching directory based host wrapper around
            the RazorHost classes to provide directory based Razor
            template execution. Templates are compiled on 
            the fly, and cached unless the templates on disk are changed.
            
            Runs Razor Templates in a seperate AppDomain
            </summary>
            <typeparam name="TBaseTemplate">The type of the base template to use</typeparam>
        </member>
        <member name="T:RazorHosting.RazorBaseHostContainer`1">
            <summary>
            Based Host implementation for hosting the RazorHost. This base
            acts as a wrapper for implementing high level host services around
            the RazorHost class. For example implementations can provide assembly
            template caching so assemblies don't recompile for each access.
            </summary>
            <typeparam name="TBaseTemplateType">The RazorTemplateBase class that templates will be based on</typeparam>
        </member>
        <member name="F:RazorHosting.RazorBaseHostContainer`1.Engine">
            <summary>
            Cached instance of the Host. Required to keep the
            reference to the host alive for multiple uses.
            </summary>
        </member>
        <member name="F:RazorHosting.RazorBaseHostContainer`1.EngineFactory">
            <summary>
            Cached instance of the Host Factory - so we can unload
            the host and its associated AppDomain.
            </summary>
        </member>
        <member name="F:RazorHosting.RazorBaseHostContainer`1.LoadedAssemblies">
            <summary>
            Keep track of each compiled assembly
            and when it was compiled.
            
            Use a hash of the string to identify string
            changes.
            </summary>
        </member>
        <member name="M:RazorHosting.RazorBaseHostContainer`1.Start">
            <summary>
            Call to start the Host running. Follow by a calls to RenderTemplate to 
            render individual templates. Call Stop when done.
            </summary>
            <returns>true or false - check ErrorMessage on false </returns>
        </member>
        <member name="M:RazorHosting.RazorBaseHostContainer`1.Stop">
            <summary>
            Stops the Host and releases the host AppDomain and cached
            assemblies.
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:RazorHosting.RazorBaseHostContainer`1.RenderTemplate(System.IO.TextReader,System.Object,System.IO.TextWriter)">
            <summary>
            Stock implementation of RenderTemplate that doesn't allow for 
            any sort of assembly caching. Instead it creates and re-renders
            templates read from the reader each time.
            
            Custom implementations of RenderTemplate should be created that
            allow for caching by examing a filename or string hash to determine
            whether a template needs to be re-generated and compiled before
            rendering.
            </summary>
            <param name="reader">TextReader that points at the template to compile</param>
            <param name="context">Optional context to pass to template</param>
            <param name="writer">TextReader passed in that receives output</param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorBaseHostContainer`1.RenderTemplateFromAssembly(System.String,System.Object,System.IO.TextWriter)">
            <summary>
            Renders a template based on a previously compiled assembly reference. This method allows for
            caching assemblies by their assembly Id.
            </summary>
            <param name="assemblyId">Id of a previously compiled assembly</param>
            <param name="context">Optional context object</param>
            <param name="writer">Output writer</param>
            <param name="nameSpace">Namespace for compiled template to execute</param>
            <param name="className">Class name for compiled template to execute</param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorBaseHostContainer`1.GetSafeClassName(System.Object)">
            <summary>
            Returns a unique ClassName for a template to execute
            Optionally pass in an objectId on which the code is based
            or null to get default behavior.
            
            Default implementation just returns Guid as string
            </summary>
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorBaseHostContainer`1.InitializeLifetimeService">
            <summary>
            Force this host to stay alive indefinitely
            </summary>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorBaseHostContainer`1.SetError(System.String)">
            <summary>
            Sets an error message consistently
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RazorHosting.RazorBaseHostContainer`1.SetError">
            <summary>
            Sets an error message consistently
            </summary>
        </member>
        <member name="P:RazorHosting.RazorBaseHostContainer`1.UseAppDomain">
            <summary>
            Determines whether the Container hosts Razor
            in a separate AppDomain. Seperate AppDomain 
            hosting allows unloading and releasing of 
            resources.
            </summary>
        </member>
        <member name="P:RazorHosting.RazorBaseHostContainer`1.BaseBinaryFolder">
            <summary>
            Base folder location where the AppDomain 
            is hosted. By default uses the same folder
            as the host application.
            
            Determines where binary dependencies are
            found for assembly references.
            </summary>
        </member>
        <member name="P:RazorHosting.RazorBaseHostContainer`1.ReferencedAssemblies">
            <summary>
            List of referenced assemblies as string values.
            Must be in GAC or in the current folder of the host app/
            base BinaryFolder        
            </summary>
        </member>
        <member name="P:RazorHosting.RazorBaseHostContainer`1.ReferencedNamespaces">
            <summary>
            List of additional namespaces to add to all templates.
            
            By default:
            System, System.Text, System.IO, System.Linq
            </summary>
        </member>
        <member name="P:RazorHosting.RazorBaseHostContainer`1.GeneratedNamespace">
            <summary>
            Name of the generated namespace for template classes
            </summary>
        </member>
        <member name="P:RazorHosting.RazorBaseHostContainer`1.ErrorMessage">
            <summary>
            Any error messages
            </summary>
        </member>
        <member name="P:RazorHosting.RazorBaseHostContainer`1.Configuration">
            <summary>
            Engine Configuration
            </summary>
        </member>
        <member name="M:RazorHosting.RazorFolderHostContainer`1.RenderTemplate(System.String,System.Object,System.IO.TextWriter)">
            <summary>
            Renders a template to a TextWriter. Useful to write output into a stream or
            the Response object. Used for partial rendering.
            </summary>
            <param name="relativePath">Relative path to the file in the folder structure</param>
            <param name="context">Optional context object or null</param>
            <param name="writer">The textwriter to write output into</param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorFolderHostContainer`1.RenderTemplate(System.String,System.Object,System.String)">
            <summary>
            Render a template from a source file on disk to a specified outputfile.
            </summary>
            <param name="relativePath">Relative path off the template root folder. Format: path/filename.cshtml</param>
            <param name="context">Any object that will be available in the template as a dynamic of this.Context</param>
            <param name="outputFile">Optional - output file where output is written to. If not specified the 
            RenderingOutputFile property is used instead
            </param>       
            <returns>true if rendering succeeds, false on failure - check ErrorMessage</returns>
        </member>
        <member name="M:RazorHosting.RazorFolderHostContainer`1.RenderTemplateToString(System.String,System.Object)">
            <summary>
            Renders a template to string. Useful for RenderTemplate 
            </summary>
            <param name="relativePath"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorFolderHostContainer`1.GetAssemblyFromFileAndCache(System.String)">
            <summary>
            Internally checks if a cached assembly exists and if it does uses it
            else creates and compiles one. Returns an assembly Id to be 
            used with the LoadedAssembly list.
            </summary>
            <param name="relativePath"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorFolderHostContainer`1.HasFileChanged(System.String,System.DateTime)">
            <summary>
            Determine if a file has been changed since a known date.
            Dates are specified in UTC format.
            </summary>
            <param name="relativePath">relative path to the template root.</param>
            <param name="originalTimeUtc"></param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorFolderHostContainer`1.GetSafeClassName(System.Object)">
            <summary>
            Overridden to return a unique name based on the filename
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="P:RazorHosting.RazorFolderHostContainer`1.TemplatePath">
            <summary>
            The Path where templates live
            </summary>
        </member>
        <member name="P:RazorHosting.RazorFolderHostContainer`1.RenderingOutputFile">
            <summary>
            When rendering to a file render output to this
            file.
            </summary>
        </member>
        <member name="T:RazorHosting.RazorTemplateFolderHost">
            <summary>
            Custom template implementation for the FolderHostContainer that supports 
            relative path based partial rendering.    
            </summary>
        </member>
        <member name="T:RazorHosting.RazorTemplateBase">
            <summary>
            Base class used for Razor Page Templates - Razor generates
            a class from the parsed Razor markup and this class is the
            base class. Class must implement an Execute() method that 
            is overridden by the parser and contains the code that generates
            the markup.  Write() and WriteLiteral() must be implemented
            to handle output generation inside of the Execute() generated
            code.
            
            This class can be subclassed to provide custom functionality.
            One common feature likely will be to provide Context style properties
            that are application specific (ie. HelpBuilderContext) and strongly
            typed and easily accesible in Razor markup code.   
            </summary>
        </member>
        <member name="M:RazorHosting.RazorTemplateBase.InitializeTemplate(System.Object,System.Object)">
            <summary>
            This method is called upon instantiation
            and allows passing custom configuration
            data to the template from the Engine.
            
            This method can then be overridden        
            </summary>
            <param name="configurationData"></param>
        </member>
        <member name="M:RazorHosting.RazorTemplateBase.Execute">
            <summary>
            Razor Parser overrides this method
            </summary>
        </member>
        <member name="P:RazorHosting.RazorTemplateBase.Context">
            <summary>
            You can pass in a generic context object
            to use in your template code
            </summary>
        </member>
        <member name="P:RazorHosting.RazorTemplateBase.ResultData">
            <summary>
            Any optional result data that the template
            might have to create and return to the caller
            </summary>
        </member>
        <member name="P:RazorHosting.RazorTemplateBase.Response">
            <summary>
            Class that generates output. Currently ultra simple
            with only Response.Write() implementation.
            </summary>
        </member>
        <member name="P:RazorHosting.RazorTemplateBase.Request">
            <summary>
            Class that provides request specific information.
            May or may not have its member data set.
            </summary>
        </member>
        <member name="P:RazorHosting.RazorTemplateBase.HostContainer">
            <summary>
            Instance of the HostContainer that is hosting
            this Engine instance. Note that this may be null
            if no HostContainer is used.
            
            Note this object needs to be cast to the 
            the appropriate Host Container
            </summary>
        </member>
        <member name="P:RazorHosting.RazorTemplateBase.Engine">
            <summary>
            Instance of the RazorEngine object.
            </summary>
        </member>
        <member name="M:RazorHosting.RazorTemplateFolderHost.RenderPartial(System.String,System.Object)">
            <summary>
            Render a partial view based on a Web relative path
            </summary>
            <param name="relativePath"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:RazorHosting.RazorEngineConfiguration">
            <summary>
            Configuration for the Host class. These settings determine some of the
            operational parameters of the RazorHost class that can be changed at
            runtime.
            </summary>        
        </member>
        <member name="P:RazorHosting.RazorEngineConfiguration.CompileToMemory">
            <summary>
            Determines if assemblies are compiled to disk or to memory.
            If compiling to disk generated assemblies are not cleaned up
            </summary>
        </member>
        <member name="P:RazorHosting.RazorEngineConfiguration.TempAssemblyPath">
            <summary>
            When compiling to disk use this Path to hold generated assemblies
            </summary>
        </member>
        <member name="P:RazorHosting.RazorEngineConfiguration.OutputEncoding">
            <summary>
            Encoding to be used when generating output to file
            </summary>
        </member>
        <member name="P:RazorHosting.RazorEngineConfiguration.StreamBufferSize">
            <summary>
            Buffer size for streamed template output when using filenames
            </summary>
        </member>
        <member name="T:RazorHosting.Utilities">
            <summary>
            Helper class that provides a few simple utilitity functions to the project
            </summary>
        </member>
        <member name="M:RazorHosting.Utilities.GetRelativePath(System.String,System.String)">
            <summary>
            Returns a relative path based on a base path.
            
            Examples:
            &lt;&lt;ul&gt;&gt;
            &lt;&lt;li&gt;&gt; filename.txt
            &lt;&lt;li&gt;&gt; subDir\filename.txt
            &lt;&lt;li&gt;&gt; ..\filename.txt
            &lt;&lt;li&gt;&gt; ..\..\filename.txt
            &lt;&lt;/ul&gt;&gt;
            <seealso>Class Utilities</seealso>
            </summary>
            <param name="fullPath">
            The full path from which to generate a relative path
            </param>
            <param name="basePath">
            The base path based on which the relative path is based on
            </param>
            <returns>string</returns>
        </member>
        <member name="T:RazorHosting.RazorRequest">
            <summary>
            Not used at the moment - more of a placeholder for now
            </summary>
        </member>
        <member name="T:RazorHosting.RazorEngineFactory`1">
            <summary>
            Factory that creates a RazorHost instance in a remote 
            AppDomain that can be unloaded. This allows unloading of
            assemblies created through scripting.
            
            Both static and instance loader methods are available. For
            AppDomain created hosts. 
            </summary>
            <typeparam name="TBaseTemplateType">RazorTemplateBase based type</typeparam>
        </member>
        <member name="F:RazorHosting.RazorEngineFactory`1.LocalAppDomain">
            <summary>
            Internal instance of the AppDomain to hang onto when
            running in a separate AppDomain. Ensures the AppDomain
            stays alive.
            </summary>
        </member>
        <member name="F:RazorHosting.RazorEngineFactory`1.Current">
            <summary>
            Internally managed instance of the HostFactory
            that ensures that the AppDomain stays alive and
            that it can be unloaded manually using the static
            methods.
            </summary>
        </member>
        <member name="M:RazorHosting.RazorEngineFactory`1.CreateRazorHost">
            <summary>
            Create an instance of the RazorHost in the current
            AppDomain. No special handling...
            </summary>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorEngineFactory`1.CreateRazorHostInAppDomain">
            <summary>
            Creates an instance of the RazorHost in a new AppDomain. This 
            version creates a static singleton that that is cached and you
            can call UnloadRazorHostInAppDomain to unload it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorEngineFactory`1.UnloadRazorHostInAppDomain">
            <summary>
            
            </summary>
        </member>
        <member name="M:RazorHosting.RazorEngineFactory`1.GetRazorHost">
            <summary>
            Create a new instance of Razor Host in the current AppDomain.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorEngineFactory`1.GetRazorHostInAppDomain">
            <summary>
            Instance method that creates a RazorHost in a new AppDomain.
            This method requires that you keep the Factory around in
            order to keep the AppDomain alive and be able to unload it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorEngineFactory`1.CreateAppDomain(System.String)">
            <summary>
            Internally creates a new AppDomain in which Razor templates can
            be run.
            </summary>
            <param name="appDomainName"></param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorEngineFactory`1.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Allow for custom assembly resolution to local file paths for signed dependency
            assemblies.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorEngineFactory`1.UnloadHost">
            <summary>
            Allow unloading of the created AppDomain to release resources
            All internal resources in the AppDomain are released including
            in memory compiled Razor assemblies.
            </summary>
        </member>
        <member name="T:RazorHosting.RazorStringHostContainer">
            <summary>
            This class is a caching directory based host wrapper around
            the RazorHost classes to provide directory based Razor
            template execution. Templates are compiled on 
            the fly, and cached unless the templates on disk are changed.
            
            Runs Razor Templates in a seperate AppDomain
            </summary>
        </member>
        <member name="M:RazorHosting.RazorStringHostContainer.RenderTemplate(System.String,System.Object)">
            <summary>
            Call this method to actually render a template to the specified outputfile
            </summary>"
            <param name="templateText">The template text to parse and render</param>        
            <param name="context">Any object that will be available in the template as a dynamic of this.Context</param>        
            <returns>true if rendering succeeds, false on failure - check ErrorMessage</returns>
        </member>
        <member name="M:RazorHosting.RazorStringHostContainer.RenderTemplateToFile(System.String,System.Object,System.String)">
            <summary>
            Renders a template from a string input to a file output.
            Same text templates are compiled and cached for re-use.
            </summary>
            <param name="templateText">Text of the template to run</param>
            <param name="context">Optional context to pass</param>
            <param name="outputFile">Output file where output is sent to</param>
            <returns></returns>
        </member>
        <member name="M:RazorHosting.RazorStringHostContainer.GetAssemblyFromStringAndCache(System.String)">
            <summary>
            Internally tries to retrieve a previously compiled template from cache
            if not found compiles a template into an assembly
            always returns an assembly id as a string.
            </summary>
            <param name="templateText">The text to parse</param>
            <returns>assembly id as a string or null on error</returns>
        </member>
        <member name="T:RazorHosting.RazorResponse">
            <summary>
            Class that handles Response output generation inside of
            RazorTemplateBase implementation.
            </summary>
        </member>
        <member name="F:RazorHosting.RazorResponse.Writer">
            <summary>
            Internal text writer - default to StringWriter()
            </summary>
        </member>
        <member name="M:RazorHosting.RazorResponse.SetTextWriter(System.IO.TextWriter)">
            <summary>
            Allows overriding the TextWriter used write output to.
            Note: This method MUST be called before any output has
            been written to the Response to capture the entire response.
            </summary>
            <param name="writer"></param>
        </member>
    </members>
</doc>
